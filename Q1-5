#include <iostream>
#include <map>
#include <string>
using namespace std;

// setting the constant variables
const int groups_count = 3; // number of groups
const int students_per_group = 50; // number of students per group
const int sports_count = 4; // number of sporting activities
const int clubs_count = 5; // number of club/societies activities
const int sports_max_capacity = 20; // maximum capacity for each sporting activity
const int clubs_max_capacity = 60; // maximum capacity for each club/societies activity
const int sports_min_members = 1; // minimum number of members required for each sporting activity
const int clubs_min_members = 1; // minimum number of members required for each club/societies activity
const int sports_max_male_percentage = 75; // maximum percentage of male members allowed for each sporting activity
const int clubs_max_male_percentage = 50; // maximum percentage of male members allowed for each club/societies activity

int main() {
    // initialize a map to store the count of male and female students
    std::map<std::string, int> gender_count;
    gender_count["male"] = 0;
    gender_count["female"] = 0;

    // display group class and how many students per group
    int total_students = 0;
    for (int i = 0; i < groups_count; i++) {
        cout << "Group " << i + 1 << " has " << students_per_group << " students. \n";
        // loop through each student in the group
        for (int j = 0; j < students_per_group; j++) {
            string name;
            cout << "Enter name of student " << j + 1 << ": ";
            cin >> name;

            string gender;
            cout << "Enter gender (Male/Female) of student " << j + 1 << ": ";
            cin >> gender;

            // update the gender count
            if (gender == "male") {
                gender_count["male"]++;
            } else if (gender == "female") {
                gender_count["female"]++;
            } else {
                cout << "Invalid gender. Try again. \n";
                j--;
                continue;
            }
            total_students++;

            // co-curricular activities
            cout << "Enter co-curricular activities for student " << j + 1 << ":\n";
            int sport_count = 0;
            int club_count = 0;
            map<string, int> sports_members;
            map<string, int> clubs_members;
            map<string, int> sports_male_members;
            map<string, int> clubs_male_members;

            while (true) {
                cout << "Do you want to participate in a sporting activity? (1 = Yes, 2 = No)\n";
                int sport_choice;
                cin >> sport_choice;

                if (sport_choice == 1) {
                    cout << "Select a sporting activity:\n";
                    cout << "1. Rugby\n";
                    cout << "2. Athletics\n";
                    cout << "3. Swimming\n";
                    cout << "4. Soccer\n";
                    int sport_activity;
                    cin >> sport_activity;
                    string sport_name;
                    switch (sport_activity) {
                        case 1:
                            sport_name = "Rugby";
                            break;
                        case 2:
                            sport_name = "Athletics";
                            break;
                        case 3:
                            sport_name = "Swimming";
                            break;
                        case 4:
                            sport_name = "Soccer";
                            break;
                    }

                    // check if the sporting activity has reached maximum capacity
                    if (sports_members[sport_name] < sports_max_capacity) {
                        sports_members[sport_name]++;
                        // update the male member count for the sporting activity
                        if (gender == "male") {
                            sports_male_members[sport_name]++;
                        }
                        sport_count++;
                    } else {
                        cout << "Sporting activity " << sport_name << " has reached maximum capacity.\n";
                    }

                    // check if the sporting activity has at least minimum members
                    if (sports_members[sport_name] < sports_min_members) {
                        cout << "Sporting activity " << sport_name << " needs at least " << sports_min_members << " members.\n";
                    }

                    // check if the sporting activity has exceeded maximum male percentage
                    if (sports_male_members[sport_name] > (sports_members[sport_name] * sports_max_male_percentage / 100)) {
                        cout << "Sporting activity " << sport_name << " has exceeded maximum male percentage.\n";
                    }
                } else {
                    break;
                }

                if (sport_count > 0) {
                                        cout << "Do you want to participate in a club/societies activity? (1 = Yes, 2 = No)\n";
                    int club_choice;
                    cin >> club_choice;

                    if (club_choice == 1) {
                        cout << "Select a club/societies activity:\n";
                        cout << "1. Debate\n";
                        cout << "2. Music\n";
                        cout << "3. Drama\n";
                        cout << "4. Art\n";
                        cout << "5. Robotics\n";
                        int club_activity;
                        cin >> club_activity;
                        string club_name;
                        switch (club_activity) {
                            case 1:
                                club_name = "Debate";
                                break;
                            case 2:
                                club_name = "Music";
                                break;
                            case 3:
                                club_name = "Drama";
                                break;
                            case 4:
                                club_name = "Art";
                                break;
                            case 5:
                                club_name = "Robotics";
                                break;
                        }

                        // check if the club/societies activity has reached maximum capacity
                        if (clubs_members[club_name] < clubs_max_capacity) {
                            clubs_members[club_name]++;
                            // update the male member count for the club/societies activity
                            if (gender == "male") {
                                clubs_male_members[club_name]++;
                            }
                            club_count++;
                        } else {
                            cout << "Club/societies activity " << club_name << " has reached maximum capacity.\n";
                        }

                        // check if the club/societies activity has at least minimum members
                        if (clubs_members[club_name] < clubs_min_members) {
                            cout << "Club/societies activity " << club_name << " needs at least " << clubs_min_members << " members.\n";
                        }

                        // check if the club/societies activity has exceeded maximum male percentage
                        if (clubs_male_members[club_name] > (clubs_members[club_name] * clubs_max_male_percentage / 100)) {
                            cout << "Club/societies activity " << club_name << " has exceeded maximum male percentage.\n";
                        }
                    } else {
                        break;
                    }
                }
            }
        }
    }

    // display the total number of students and gender count
    cout << "Total number of students: " << total_students << "\n";
    cout << "Male students: " << gender_count["male"] << "\n";
    cout << "Female students: " << gender_count["female"] << "\n";

    return 0;
}
